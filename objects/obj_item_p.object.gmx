<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>item_state = ITEM_DROP;

item_get_possible = false;
alarm[0] = room_speed;

pick_x = 0;
pick_y = 0;

inv_x = 0;
inv_y = 0;


//
image_index = step.image_index;
//


image_speed = 0;

item_width = (sprite_width div ITEM_LENGTH) + min(1, (sprite_width mod ITEM_LENGTH));
item_height = (sprite_height div ITEM_LENGTH) + min(1, (sprite_height mod ITEM_LENGTH));

item_w_max = 0;
item_h_max = 0;

for (i=0; i&lt;item_width; i++)
{
    for (j=0; j&lt;item_height; j++)
    {
        if(collision_rectangle(x+i*ITEM_LENGTH, y+j*ITEM_LENGTH, 
                                x+(i+1)*ITEM_LENGTH-1, y+(j+1)*ITEM_LENGTH-1, self.id, true, false) != noone) {
            item_shape[i,j] = true;
            if(i+1&gt;item_w_max) item_w_max = i+1;
            if(j+1&gt;item_h_max) item_h_max = j+1;
        }else{
            item_shape[i,j] = false;
        };
    };
};
item_width = item_w_max;
item_height = item_h_max;
mask_index = spr_item_mask;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>item_get_possible = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_smp_player">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>asdf = true;
if (item_get_possible)
{
    if (item_state == ITEM_DROP)
    {
        check_coll = false;
        check_in = false;
        for (j=0; j&lt;=UI_inventory.inv_height - item_height; j+=1)
        {
            for (i=0; i&lt;=UI_inventory.inv_width - item_width; i+=1)
            {
            
                for (_j=0; _j&lt;item_height; _j+=1)
                {
                    for (_i=0; _i&lt;item_width; _i+=1)
                    {
                        if (item_shape[_i,_j])
                        {
                            if (ds_grid_get(UI_inventory.inv_grid, i+_i, j+_j) != 0) {
                                check_coll = true;
                                break;
                            }
                        };
                    };
                    if (check_coll) break;
                };
                
                if (check_coll)
                {
                    check_coll = false;
                }
                else
                {
                    inv_x = i;
                    inv_y = j;
                    check_in = true;
                    break;
                };
            };
            if (check_in) break;
        };
        
        if (!check_in)
        {
            item_get_possible = false;
            alarm[0] = room_speed;
        }
        else
        {
            for (_i=0; _i&lt;item_width; _i+=1)
            {
                for (_j=0; _j&lt;item_height; _j+=1)
                {
                    if(item_shape[_i,_j]) 
                    {
                        ds_grid_set(UI_inventory.inv_grid, inv_x+_i, inv_y+_j, id);
                    }
                }
            }
            item_state = ITEM_IN;
        };
        
    };
};

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(global.mouse_focus == self.id) {
    global.mouse_focus = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(global.mouse_focus == 0) {
    global.mouse_focus = self.id;
    pick_x = mouse_x - x;
    pick_y = mouse_y - y;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch (item_state)
{
    case ITEM_DROP: 
        //draw_sprite_stretched(spr_item_mask, -1, x-sprite_width*0.2, y-sprite_width*0.1, sprite_width*0.4, sprite_width*0.2);
        draw_sprite_ext(spr_item_mask, image_index, x, y, item_width/4, item_width/4, 0, c_white, 1);
        draw_sprite_ext(sprite_index, image_index, x - item_width*ITEM_LENGTH*0.25, y - item_height*ITEM_LENGTH*0.5, 0.5, 0.5, 0, c_white, 1);
        break;
    case ITEM_PICK:
        draw_set_alpha(0.3);
        
        for (i=0; i&lt;item_width; i++)
        {
            for (j=0; j&lt;item_height; j++)
            {
                if(item_shape[i,j]) {
                    draw_rectangle(x+i*ITEM_LENGTH, y+j*ITEM_LENGTH, 
                                                    x+(i+1)*ITEM_LENGTH-1, y+(j+1)*ITEM_LENGTH-1, false);
                }
            };
        };
        
        draw_set_alpha(1);
        
        draw_sprite(sprite_index, -1, x, y);
        break;
    case ITEM_IN: 
        x = UI_inventory.x + inv_x*ITEM_LENGTH;
        y = UI_inventory.y + inv_y*ITEM_LENGTH;
        draw_sprite(sprite_index, -1, x, y);
        break;
    case ITEM_QUICK: 
    
        break;
    default: 
        
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
