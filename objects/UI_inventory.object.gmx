<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>inv_width = 15;
inv_height = 15;
mouse_focus_x = -1;
mouse_focus_y = -1;

inv_grid = ds_grid_create(inv_width, inv_height);

item_coll_check = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch (UI_mouse.mouse_state)
{
    case MOUSE_NONE:
        if(mouse_x &gt; x &amp;&amp; mouse_x &lt; x + inv_width*ITEM_LENGTH) {
            mouse_focus_x = (mouse_x - x) div ITEM_LENGTH;
        }else{
            mouse_focus_x = -1;
        }
        if(mouse_y &gt; y &amp;&amp; mouse_y &lt; y + inv_height*ITEM_LENGTH) {
            mouse_focus_y = (mouse_y - y) div ITEM_LENGTH;
        }else{
            mouse_focus_y = -1;
        }
        break;
    case MOUSE_PICK:
        if(mouse_x - global.mouse_focus.pick_x &gt; x &amp;&amp; mouse_x - global.mouse_focus.pick_x &lt; x + (inv_width - global.mouse_focus.item_width)*ITEM_LENGTH) {
            mouse_focus_x = round((mouse_x - global.mouse_focus.pick_x - x) / ITEM_LENGTH);
        }else{
            mouse_focus_x = -1;
        }
        if(mouse_y - global.mouse_focus.pick_y &gt; y &amp;&amp; mouse_y - global.mouse_focus.pick_y &lt; y + (inv_height - global.mouse_focus.item_height)*ITEM_LENGTH) {
            mouse_focus_y = round((mouse_y - global.mouse_focus.pick_y - y) / ITEM_LENGTH);
        }else{
            mouse_focus_y = -1;
        }
        break;
    default: 
        if(mouse_x &gt; x &amp;&amp; mouse_x &lt; x + inv_width*ITEM_LENGTH) {
            mouse_focus_x = (mouse_x - x) div ITEM_LENGTH;
        }else{
            mouse_focus_x = -1;
        }
        if(mouse_y &gt; y &amp;&amp; mouse_y &lt; y + inv_height*ITEM_LENGTH) {
            mouse_focus_y = (mouse_y - y) div ITEM_LENGTH;
        }else{
            mouse_focus_y = -1;
        }
}


if(mouse_check_button_pressed(mb_left)) {
    switch (UI_mouse.mouse_state)
    {
        case MOUSE_NONE:
            if(mouse_focus_x != -1 &amp;&amp; mouse_focus_y != -1) {
                if(global.mouse_focus == 0) {
                    if(ds_grid_get(inv_grid, mouse_focus_x, mouse_focus_y) &gt; 0) {
                        global.mouse_focus = ds_grid_get(inv_grid, mouse_focus_x, mouse_focus_y);
                        global.mouse_focus.pick_x = mouse_x - global.mouse_focus.x;
                        global.mouse_focus.pick_y = mouse_y - global.mouse_focus.y;
                        global.mouse_focus.item_state = ITEM_PICK;
                        UI_mouse.mouse_state = MOUSE_PICK;
                        for (_i=0; _i&lt;global.mouse_focus.item_width; _i++)
                        {
                            for (_j=0; _j&lt;global.mouse_focus.item_height; _j++)
                            {
                                if (global.mouse_focus.item_shape[_i,_j])
                                {
                                    ds_grid_set(UI_inventory.inv_grid, global.mouse_focus.inv_x+_i, global.mouse_focus.inv_y+_j, 0);
                                };
                            }
                        }
                        if(mouse_x - global.mouse_focus.pick_x &gt; x &amp;&amp; mouse_x - global.mouse_focus.pick_x &lt; x + (inv_width - global.mouse_focus.item_width)*ITEM_LENGTH) {
                            mouse_focus_x = round((mouse_x - global.mouse_focus.pick_x - x) / ITEM_LENGTH);
                        }else{
                            mouse_focus_x = -1;
                        }
                        if(mouse_y - global.mouse_focus.pick_y &gt; y &amp;&amp; mouse_y - global.mouse_focus.pick_y &lt; y + (inv_height - global.mouse_focus.item_height)*ITEM_LENGTH) {
                            mouse_focus_y = round((mouse_y - global.mouse_focus.pick_y - y) / ITEM_LENGTH);
                        }else{
                            mouse_focus_y = -1;
                        }
                    }
                }
            }
            break;
        case MOUSE_PICK:
            if(mouse_focus_x != -1 &amp;&amp; mouse_focus_y != -1) {
                if (!item_coll_check)
                {
                    for (_i=0; _i&lt;global.mouse_focus.item_width; _i++)
                    {
                        for (_j=0; _j&lt;global.mouse_focus.item_height; _j++)
                        {
                            if (global.mouse_focus.item_shape[_i,_j])
                            {
                                if(ds_grid_get(UI_inventory.inv_grid, mouse_focus_x+_i, mouse_focus_y+_j) == 0)
                                {
                                    ds_grid_set(UI_inventory.inv_grid, mouse_focus_x+_i, mouse_focus_y+_j, global.mouse_focus);
                                }
                            }
                        }
                    }
                    global.mouse_focus.inv_x = mouse_focus_x;
                    global.mouse_focus.inv_y = mouse_focus_y;
                    global.mouse_focus.item_state = ITEM_IN;
                    global.mouse_focus = 0;
                    UI_mouse.mouse_state = MOUSE_NONE;
                }
            }
            break;
        default: 
            if(mouse_focus_x != -1 &amp;&amp; mouse_focus_y != -1) {
                if(global.mouse_focus == 0) {
                    if(ds_grid_get(inv_grid, mouse_focus_x, mouse_focus_y) &gt; 0) {
                        global.mouse_focus = ds_grid_get(inv_grid, mouse_focus_x, mouse_focus_y);
                        global.mouse_focus.pick_x = mouse_x - global.mouse_focus.x;
                        global.mouse_focus.pick_y = mouse_y - global.mouse_focus.y;
                        global.mouse_focus.item_state = ITEM_PICK;
                        UI_mouse.mouse_state = MOUSE_PICK;
                        for (_i=0; _i&lt;global.mouse_focus.item_width; _i++)
                        {
                            for (_j=0; _j&lt;global.mouse_focus.item_height; _j++)
                            {
                                if (global.mouse_focus.item_shape[_i,_j])
                                {
                                    ds_grid_set(UI_inventory.inv_grid, global.mouse_focus.inv_x+_i, global.mouse_focus.inv_y+_j, 0);
                                };
                            }
                        }
                    }
                }
            }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_alpha(0.3);
for (i=0; i&lt;inv_width; i+=1)
{
    for (j=0; j&lt;inv_height; j+=1)
    {
        draw_rectangle(x + i*ITEM_LENGTH, y + j*ITEM_LENGTH, x + (i+1)*ITEM_LENGTH, y + (j+1)*ITEM_LENGTH, false);
        draw_text(x + i*ITEM_LENGTH, y + j*ITEM_LENGTH,  real(ds_grid_get(inv_grid, i, j)) mod 1000);
    };
};
draw_set_alpha(1);

if(mouse_focus_x != -1 &amp;&amp; mouse_focus_y != -1) {
    switch (UI_mouse.mouse_state)
    {
        case MOUSE_NONE:
            if(ds_grid_get(inv_grid, mouse_focus_x, mouse_focus_y) == 0) {
                draw_set_alpha(0.3);
                draw_set_color(c_white);
                draw_rectangle(x + mouse_focus_x*ITEM_LENGTH, y + mouse_focus_y*ITEM_LENGTH,
                                x + (mouse_focus_x+1)*ITEM_LENGTH, y + (mouse_focus_y+1)*ITEM_LENGTH, false);
                draw_set_alpha(1);
                draw_set_color(c_black);
            }else{
                temp_id = ds_grid_get(inv_grid, mouse_focus_x, mouse_focus_y);
                draw_text(mouse_x+20, mouse_y, temp_id mod 1000);
                draw_set_alpha(0.3);
                draw_set_color(c_white);
                for (i=0; i&lt;temp_id.item_width; i++)
                {
                    for (j=0; j&lt;temp_id.item_height; j++)
                    {
                        if(temp_id.item_shape[i,j]) {
                            draw_rectangle(temp_id.x+i*ITEM_LENGTH, temp_id.y+j*ITEM_LENGTH, 
                                                            temp_id.x+(i+1)*ITEM_LENGTH-1, temp_id.y+(j+1)*ITEM_LENGTH-1, false);
                        }
                    };
                };
                draw_set_alpha(1);
                draw_set_color(c_black);
            }
            break;
        case MOUSE_PICK:
            item_coll_check = false;
            for (_i=0; _i&lt;global.mouse_focus.item_width; _i++)
            {
                for (_j=0; _j&lt;global.mouse_focus.item_height; _j++)
                {
                    if (global.mouse_focus.item_shape[_i,_j])
                    {
                        if(ds_grid_get(UI_inventory.inv_grid, mouse_focus_x+_i, mouse_focus_y+_j) == 0)
                        {
                            draw_set_alpha(0.3);
                            draw_set_color(c_blue);
                            draw_rectangle(x + (mouse_focus_x+_i)*ITEM_LENGTH, y + (mouse_focus_y+_j)*ITEM_LENGTH,
                                            x + ((mouse_focus_x+_i)+1)*ITEM_LENGTH, y + ((mouse_focus_y+_j)+1)*ITEM_LENGTH, false);
                            draw_set_alpha(1);
                            draw_set_color(c_black);
                        }else{
                            item_coll_check = true;
                            draw_set_alpha(0.3);
                            draw_set_color(c_red);
                            draw_rectangle(x + (mouse_focus_x+_i)*ITEM_LENGTH, y + (mouse_focus_y+_j)*ITEM_LENGTH,
                                            x + ((mouse_focus_x+_i)+1)*ITEM_LENGTH, y + ((mouse_focus_y+_j)+1)*ITEM_LENGTH, false);
                            draw_set_alpha(1);
                            draw_set_color(c_black);
                        }
                    };
                }
            }
            break;
        default:
            if(ds_grid_get(inv_grid, mouse_focus_x, mouse_focus_y) == 0) {
                draw_set_alpha(0.3);
                draw_set_color(c_white);
                draw_rectangle(x + mouse_focus_x*ITEM_LENGTH, y + mouse_focus_y*ITEM_LENGTH,
                                x + (mouse_focus_x+1)*ITEM_LENGTH, y + (mouse_focus_y+1)*ITEM_LENGTH, false);
                draw_set_alpha(1);
                draw_set_color(c_black);
            }else{
                temp_id = ds_grid_get(inv_grid, mouse_focus_x, mouse_focus_y);
                draw_text(mouse_x, mouse_y, temp_id);
                draw_set_alpha(0.3);
                draw_set_color(c_white);
                for (i=0; i&lt;temp_id.item_width; i++)
                {
                    for (j=0; j&lt;temp_id.item_height; j++)
                    {
                        if(temp_id.item_shape[i,j]) {
                            draw_rectangle(temp_id.x+i*ITEM_LENGTH, temp_id.y+j*ITEM_LENGTH, 
                                                            temp_id.x+(i+1)*ITEM_LENGTH-1, temp_id.y+(j+1)*ITEM_LENGTH-1, false);
                        }
                    };
                };
                draw_set_alpha(1);
                draw_set_color(c_black);
            }
    }
     
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
